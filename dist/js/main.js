let db;!function(){function promisifyRequest(request){return new Promise(function(resolve,reject){request.onsuccess=function(){resolve(request.result)},request.onerror=function(){reject(request.error)}})}function promisifyRequestCall(obj,method,args){var request,p=new Promise(function(resolve,reject){promisifyRequest(request=obj[method].apply(obj,args)).then(resolve,reject)});return p.request=request,p}function proxyProperties(ProxyClass,targetProp,properties){properties.forEach(function(prop){Object.defineProperty(ProxyClass.prototype,prop,{get:function(){return this[targetProp][prop]},set:function(val){this[targetProp][prop]=val}})})}function proxyRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return promisifyRequestCall(this[targetProp],prop,arguments)})})}function proxyMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return this[targetProp][prop].apply(this[targetProp],arguments)})})}function proxyCursorRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return obj=this[targetProp],(p=promisifyRequestCall(obj,prop,arguments)).then(function(value){if(value)return new Cursor(value,p.request)});var obj,p})})}function Index(index){this._index=index}function Cursor(cursor,request){this._cursor=cursor,this._request=request}function ObjectStore(store){this._store=store}function Transaction(idbTransaction){this._tx=idbTransaction,this.complete=new Promise(function(resolve,reject){idbTransaction.oncomplete=function(){resolve()},idbTransaction.onerror=function(){reject(idbTransaction.error)},idbTransaction.onabort=function(){reject(idbTransaction.error)}})}function UpgradeDB(db,oldVersion,transaction){this._db=db,this.oldVersion=oldVersion,this.transaction=new Transaction(transaction)}function DB(db){this._db=db}proxyProperties(Index,"_index",["name","keyPath","multiEntry","unique"]),proxyRequestMethods(Index,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),proxyCursorRequestMethods(Index,"_index",IDBIndex,["openCursor","openKeyCursor"]),proxyProperties(Cursor,"_cursor",["direction","key","primaryKey","value"]),proxyRequestMethods(Cursor,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(methodName){methodName in IDBCursor.prototype&&(Cursor.prototype[methodName]=function(){var cursor=this,args=arguments;return Promise.resolve().then(function(){return cursor._cursor[methodName].apply(cursor._cursor,args),promisifyRequest(cursor._request).then(function(value){if(value)return new Cursor(value,cursor._request)})})})}),ObjectStore.prototype.createIndex=function(){return new Index(this._store.createIndex.apply(this._store,arguments))},ObjectStore.prototype.index=function(){return new Index(this._store.index.apply(this._store,arguments))},proxyProperties(ObjectStore,"_store",["name","keyPath","indexNames","autoIncrement"]),proxyRequestMethods(ObjectStore,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),proxyCursorRequestMethods(ObjectStore,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),proxyMethods(ObjectStore,"_store",IDBObjectStore,["deleteIndex"]),Transaction.prototype.objectStore=function(){return new ObjectStore(this._tx.objectStore.apply(this._tx,arguments))},proxyProperties(Transaction,"_tx",["objectStoreNames","mode"]),proxyMethods(Transaction,"_tx",IDBTransaction,["abort"]),UpgradeDB.prototype.createObjectStore=function(){return new ObjectStore(this._db.createObjectStore.apply(this._db,arguments))},proxyProperties(UpgradeDB,"_db",["name","version","objectStoreNames"]),proxyMethods(UpgradeDB,"_db",IDBDatabase,["deleteObjectStore","close"]),DB.prototype.transaction=function(){return new Transaction(this._db.transaction.apply(this._db,arguments))},proxyProperties(DB,"_db",["name","version","objectStoreNames"]),proxyMethods(DB,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(funcName){[ObjectStore,Index].forEach(function(Constructor){Constructor.prototype[funcName.replace("open","iterate")]=function(){var arr,args=(arr=arguments,Array.prototype.slice.call(arr)),callback=args[args.length-1],nativeObject=this._store||this._index,request=nativeObject[funcName].apply(nativeObject,args.slice(0,-1));request.onsuccess=function(){callback(request.result)}}})}),[Index,ObjectStore].forEach(function(Constructor){Constructor.prototype.getAll||(Constructor.prototype.getAll=function(query,count){var instance=this,items=[];return new Promise(function(resolve){instance.iterateCursor(query,function(cursor){cursor?(items.push(cursor.value),void 0===count||items.length!=count?cursor.continue():resolve(items)):resolve(items)})})})});var exp={open:function(name,version,upgradeCallback){var p=promisifyRequestCall(indexedDB,"open",[name,version]),request=p.request;return request.onupgradeneeded=function(event){upgradeCallback&&upgradeCallback(new UpgradeDB(request.result,event.oldVersion,request.transaction))},p.then(function(db){return new DB(db)})},delete:function(name){return promisifyRequestCall(indexedDB,"deleteDatabase",[name])}};"undefined"!=typeof module?module.exports=exp:self.idb=exp}();const dbId="restaurant-reviews";function openDatabase(){return db||(navigator.serviceWorker?idb.open(dbId,1,upgradeDb=>{upgradeDb.createObjectStore(dbId,{keyPath:"id"}).createIndex("by-id","id")}):Promise.resolve())}class DBHelper{static get port(){return 1337}static get DATABASE_URL(){return`http://localhost:${DBHelper.port}/restaurants`}static get DATABASE_URL_REVIEWS(){return`http://localhost:${DBHelper.port}/reviews`}static fetchRestaurants(){return new Promise((resolve,reject)=>{openDatabase().then(db=>{return!!db&&db.transaction(dbId).objectStore(dbId).index("by-id").getAll().then(restaurants=>!!restaurants.length&&restaurants)}).then(restaurants=>{restaurants?(console.info("Fetched all restaurants: retreived from idb."),resolve(restaurants)):fetch(DBHelper.DATABASE_URL).then(response=>{if(200===response.status){const jsonResponse=response.json();openDatabase().then(db=>{db&&jsonResponse.then(restaurants=>{const store=db.transaction(dbId,"readwrite").objectStore(dbId);restaurants.forEach(restaurant=>{store.put(restaurant)})})}),console.info("Fetched all restaurants: retreived via fetch."),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})})}static fetchRestaurantById(id){return new Promise((resolve,reject)=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>{restaurant?(console.info(`Fetched restaurant ${id}: retreived from idb.`),resolve(restaurant)):fetch(`${DBHelper.DATABASE_URL}/${id}`).then(response=>{if(200===response.status){const jsonResponse=response.json();jsonResponse.then(restaurant=>{DBHelper.storeRestaurantInIdb(restaurant)}),console.info(`Fetched restaurant ${id}: retreived via fetch.`),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})})}static fetchRestaurantReviewsById(id){return new Promise((resolve,reject)=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>!!restaurant.reviews&&restaurant.reviews).then(reviews=>{reviews?(console.info(`Fetched restaurant ${id} reviews: retreived from idb.`),resolve(restaurant)):fetch(`${DBHelper.DATABASE_URL_REVIEWS}/?restaurant_id=${id}`).then(response=>{if(200===response.status){const jsonResponse=response.json();jsonResponse.then(reviews=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>{restaurant&&(restaurant.reviews=reviews,DBHelper.storeRestaurantInIdb(restaurant))})}),console.info(`Fetched restaurant ${id} reviews: retreived via fetch.`),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})})}static fetchRestaurantByCuisine(cuisine){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const results=restaurants.filter(r=>r.cuisine_type==cuisine);resolve(results)}).catch(error=>{reject(error)})})}static fetchRestaurantByNeighborhood(neighborhood){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const results=restaurants.filter(r=>r.neighborhood==neighborhood);resolve(results)}).catch(error=>{reject(error)})})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),resolve(results)}).catch(error=>{reject(error)})})}static fetchNeighborhoods(){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);resolve(uniqueNeighborhoods)}).catch(error=>{reject(error)})})}static fetchCuisines(){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);resolve(uniqueCuisines)}).catch(error=>{reject(error)})})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}.webp`}static mapMarkerForRestaurant(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map,animation:google.maps.Animation.DROP})}static toogleRestaurantFavourite(id,state){return new Promise((resolve,reject)=>{fetch(`${DBHelper.DATABASE_URL}/${id}/?is_favorite=${state}`,{method:"PUT"}).then(response=>{if(200===response.status){const jsonResponse=response.json();openDatabase().then(db=>{db&&jsonResponse.then(restaurant=>{db.transaction(dbId,"readwrite").objectStore(dbId).put(restaurant)})}),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})}static getRestaurantFromIdbById(id){return openDatabase().then(db=>{if(db){return db.transaction(dbId).objectStore(dbId).index("by-id").getAll().then(restaurants=>{const restaurant=restaurants.filter(r=>r.id==id);return!!restaurant.length&&restaurant[0]})}return!1})}static storeRestaurantInIdb(restaurant){return openDatabase().then(db=>{if(!db)return!1;db.transaction(dbId,"readwrite").objectStore(dbId).put(restaurant)})}static postRestaurantReview(id,formData){return new Promise((resolve,reject)=>{fetch(`${DBHelper.DATABASE_URL_REVIEWS}`,{method:"POST",body:formData}).then(response=>{if(201===response.status){const jsonResponse=response.json();jsonResponse.then(review=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>{restaurant&&(restaurant.reviews||(restaurant.reviews=[]),restaurant.reviews.push(review),DBHelper.storeRestaurantInIdb(restaurant))})}),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})}}let restaurants,neighborhoods,cuisines,osberver;var map,markers=[];navigator.serviceWorker&&navigator.serviceWorker.register("sw.js",{scope:"./"}).then(function(reg){console.log("Service worker has been registered for scope: "+reg.scope)}),"IntersectionObserver"in window&&(observer=new IntersectionObserver(function(images){images.forEach(image=>{image.intersectionRatio>0&&(observer.unobserve(image.target),image.target.src=image.target.dataset.src)})},{rootMargin:"10px 0px"})),document.addEventListener("DOMContentLoaded",event=>{const script=document.createElement("script");script.src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClViRpLh2mA3D_Gn5PYcjXsTo2v91ujMs&libraries=places&callback=initMap",document.getElementsByTagName("body")[0].appendChild(script),fetchNeighborhoods(),fetchCuisines(),updateRestaurants(),window.addEventListener("resize",()=>{window.innerWidth>=992&&!self.map&&self.initMap()})}),showMapModal=(()=>{document.getElementsByTagName("body")[0].classList.add("map-visible"),self.initMap(!0)}),hideMapModal=(()=>{document.getElementsByTagName("body")[0].classList.remove("map-visible")}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods().then(neighborhoods=>{self.neighborhoods=neighborhoods,fillNeighborhoodsHTML()}).catch(error=>{console.error(error)})}),fillNeighborhoodsHTML=((neighborhoods=self.neighborhoods)=>{const select=document.getElementById("neighborhoods-select");neighborhoods.forEach(neighborhood=>{const option=document.createElement("option");option.innerHTML=neighborhood,option.value=neighborhood,select.append(option)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines().then(cuisines=>{self.cuisines=cuisines,fillCuisinesHTML()}).catch(error=>{console.error(error)})}),fillCuisinesHTML=((cuisines=self.cuisines)=>{const select=document.getElementById("cuisines-select");cuisines.forEach(cuisine=>{const option=document.createElement("option");option.innerHTML=cuisine,option.value=cuisine,select.append(option)})}),window.initMap=((forceRender=!1)=>{if(window.innerWidth>=992||forceRender&&!self.map){let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:loc,scrollwheel:!1}),self.markers.length||addMarkersToMap()}}),updateRestaurants=(()=>{const cSelect=document.getElementById("cuisines-select"),nSelect=document.getElementById("neighborhoods-select"),cIndex=cSelect.selectedIndex,nIndex=nSelect.selectedIndex,cuisine=cSelect[cIndex].value,neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood).then(restaurants=>{resetRestaurants(restaurants),fillRestaurantsHTML()}).catch(error=>{console.error(error)})}),resetRestaurants=(restaurants=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(m=>m.setMap(null)),self.markers=[],self.restaurants=restaurants}),fillRestaurantsHTML=((restaurants=self.restaurants)=>{const ul=document.getElementById("restaurants-list");if(restaurants.length)restaurants.forEach(restaurant=>{ul.append(createRestaurantHTML(restaurant))}),addMarkersToMap();else{const li=document.createElement("li"),message=document.createElement("p");message.innerHTML="Sorry, we could'nt find any restaurants based on your filter criteria.",li.append(message),ul.append(li)}}),createRestaurantHTML=(restaurant=>{const li=document.createElement("li"),image=document.createElement("img");image.className="restaurant-img",image.src="/img/placeholder.webp",restaurant.photograph&&(observer?(image.dataset.src=DBHelper.imageUrlForRestaurant(restaurant),observer.observe(image)):image.src=DBHelper.imageUrlForRestaurant(restaurant)),image.alt=restaurant.name;const imageWrapper=document.createElement("div");imageWrapper.className="restaurant-img-wrapper",imageWrapper.append(image),li.append(imageWrapper);const name=document.createElement("h3");name.innerHTML=restaurant.name,li.append(name);const neighborhood=document.createElement("p");neighborhood.innerHTML=restaurant.neighborhood,li.append(neighborhood);const address=document.createElement("p");address.innerHTML=restaurant.address,li.append(address);const more=document.createElement("a");return more.innerHTML="View Details",more.href=DBHelper.urlForRestaurant(restaurant),li.append(more),li}),addMarkersToMap=((restaurants=self.restaurants)=>{self.map&&restaurants&&restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,"click",()=>{window.location.href=marker.url}),self.markers.push(marker)})});