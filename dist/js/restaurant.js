let db;!function(){function promisifyRequest(request){return new Promise(function(resolve,reject){request.onsuccess=function(){resolve(request.result)},request.onerror=function(){reject(request.error)}})}function promisifyRequestCall(obj,method,args){var request,p=new Promise(function(resolve,reject){promisifyRequest(request=obj[method].apply(obj,args)).then(resolve,reject)});return p.request=request,p}function proxyProperties(ProxyClass,targetProp,properties){properties.forEach(function(prop){Object.defineProperty(ProxyClass.prototype,prop,{get:function(){return this[targetProp][prop]},set:function(val){this[targetProp][prop]=val}})})}function proxyRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return promisifyRequestCall(this[targetProp],prop,arguments)})})}function proxyMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return this[targetProp][prop].apply(this[targetProp],arguments)})})}function proxyCursorRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return obj=this[targetProp],(p=promisifyRequestCall(obj,prop,arguments)).then(function(value){if(value)return new Cursor(value,p.request)});var obj,p})})}function Index(index){this._index=index}function Cursor(cursor,request){this._cursor=cursor,this._request=request}function ObjectStore(store){this._store=store}function Transaction(idbTransaction){this._tx=idbTransaction,this.complete=new Promise(function(resolve,reject){idbTransaction.oncomplete=function(){resolve()},idbTransaction.onerror=function(){reject(idbTransaction.error)},idbTransaction.onabort=function(){reject(idbTransaction.error)}})}function UpgradeDB(db,oldVersion,transaction){this._db=db,this.oldVersion=oldVersion,this.transaction=new Transaction(transaction)}function DB(db){this._db=db}proxyProperties(Index,"_index",["name","keyPath","multiEntry","unique"]),proxyRequestMethods(Index,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),proxyCursorRequestMethods(Index,"_index",IDBIndex,["openCursor","openKeyCursor"]),proxyProperties(Cursor,"_cursor",["direction","key","primaryKey","value"]),proxyRequestMethods(Cursor,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(methodName){methodName in IDBCursor.prototype&&(Cursor.prototype[methodName]=function(){var cursor=this,args=arguments;return Promise.resolve().then(function(){return cursor._cursor[methodName].apply(cursor._cursor,args),promisifyRequest(cursor._request).then(function(value){if(value)return new Cursor(value,cursor._request)})})})}),ObjectStore.prototype.createIndex=function(){return new Index(this._store.createIndex.apply(this._store,arguments))},ObjectStore.prototype.index=function(){return new Index(this._store.index.apply(this._store,arguments))},proxyProperties(ObjectStore,"_store",["name","keyPath","indexNames","autoIncrement"]),proxyRequestMethods(ObjectStore,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),proxyCursorRequestMethods(ObjectStore,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),proxyMethods(ObjectStore,"_store",IDBObjectStore,["deleteIndex"]),Transaction.prototype.objectStore=function(){return new ObjectStore(this._tx.objectStore.apply(this._tx,arguments))},proxyProperties(Transaction,"_tx",["objectStoreNames","mode"]),proxyMethods(Transaction,"_tx",IDBTransaction,["abort"]),UpgradeDB.prototype.createObjectStore=function(){return new ObjectStore(this._db.createObjectStore.apply(this._db,arguments))},proxyProperties(UpgradeDB,"_db",["name","version","objectStoreNames"]),proxyMethods(UpgradeDB,"_db",IDBDatabase,["deleteObjectStore","close"]),DB.prototype.transaction=function(){return new Transaction(this._db.transaction.apply(this._db,arguments))},proxyProperties(DB,"_db",["name","version","objectStoreNames"]),proxyMethods(DB,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(funcName){[ObjectStore,Index].forEach(function(Constructor){Constructor.prototype[funcName.replace("open","iterate")]=function(){var arr,args=(arr=arguments,Array.prototype.slice.call(arr)),callback=args[args.length-1],nativeObject=this._store||this._index,request=nativeObject[funcName].apply(nativeObject,args.slice(0,-1));request.onsuccess=function(){callback(request.result)}}})}),[Index,ObjectStore].forEach(function(Constructor){Constructor.prototype.getAll||(Constructor.prototype.getAll=function(query,count){var instance=this,items=[];return new Promise(function(resolve){instance.iterateCursor(query,function(cursor){cursor?(items.push(cursor.value),void 0===count||items.length!=count?cursor.continue():resolve(items)):resolve(items)})})})});var exp={open:function(name,version,upgradeCallback){var p=promisifyRequestCall(indexedDB,"open",[name,version]),request=p.request;return request.onupgradeneeded=function(event){upgradeCallback&&upgradeCallback(new UpgradeDB(request.result,event.oldVersion,request.transaction))},p.then(function(db){return new DB(db)})},delete:function(name){return promisifyRequestCall(indexedDB,"deleteDatabase",[name])}};"undefined"!=typeof module?module.exports=exp:self.idb=exp}();const dbId="restaurant-reviews";function openDatabase(){return db||(navigator.serviceWorker?idb.open(dbId,1,upgradeDb=>{upgradeDb.createObjectStore(dbId,{keyPath:"id"}).createIndex("by-id","id")}):Promise.resolve())}class DBHelper{static get port(){return 1337}static get DATABASE_URL(){return`http://localhost:${DBHelper.port}/restaurants`}static get DATABASE_URL_REVIEWS(){return`http://localhost:${DBHelper.port}/reviews`}static fetchRestaurants(){return new Promise((resolve,reject)=>{openDatabase().then(db=>{return!!db&&db.transaction(dbId).objectStore(dbId).index("by-id").getAll().then(restaurants=>!!restaurants.length&&restaurants)}).then(restaurants=>{restaurants?(console.info("Fetched all restaurants: retreived from idb."),resolve(restaurants)):fetch(DBHelper.DATABASE_URL).then(response=>{if(200===response.status){const jsonResponse=response.json();openDatabase().then(db=>{db&&jsonResponse.then(restaurants=>{const store=db.transaction(dbId,"readwrite").objectStore(dbId);restaurants.forEach(restaurant=>{store.put(restaurant)})})}),console.info("Fetched all restaurants: retreived via fetch."),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})})}static fetchRestaurantById(id){return new Promise((resolve,reject)=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>{restaurant?(console.info(`Fetched restaurant ${id}: retreived from idb.`),resolve(restaurant)):fetch(`${DBHelper.DATABASE_URL}/${id}`).then(response=>{if(200===response.status){const jsonResponse=response.json();jsonResponse.then(restaurant=>{DBHelper.storeRestaurantInIdb(restaurant)}),console.info(`Fetched restaurant ${id}: retreived via fetch.`),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})})}static fetchRestaurantReviewsById(id){return new Promise((resolve,reject)=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>!!restaurant.reviews&&restaurant.reviews).then(reviews=>{reviews?(console.info(`Fetched restaurant ${id} reviews: retreived from idb.`),resolve(restaurant)):fetch(`${DBHelper.DATABASE_URL_REVIEWS}/?restaurant_id=${id}`).then(response=>{if(200===response.status){const jsonResponse=response.json();jsonResponse.then(reviews=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>{restaurant&&(restaurant.reviews=reviews,DBHelper.storeRestaurantInIdb(restaurant))})}),console.info(`Fetched restaurant ${id} reviews: retreived via fetch.`),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})})}static fetchRestaurantByCuisine(cuisine){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const results=restaurants.filter(r=>r.cuisine_type==cuisine);resolve(results)}).catch(error=>{reject(error)})})}static fetchRestaurantByNeighborhood(neighborhood){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const results=restaurants.filter(r=>r.neighborhood==neighborhood);resolve(results)}).catch(error=>{reject(error)})})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),resolve(results)}).catch(error=>{reject(error)})})}static fetchNeighborhoods(){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);resolve(uniqueNeighborhoods)}).catch(error=>{reject(error)})})}static fetchCuisines(){return new Promise((resolve,reject)=>{DBHelper.fetchRestaurants().then(restaurants=>{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);resolve(uniqueCuisines)}).catch(error=>{reject(error)})})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}.webp`}static mapMarkerForRestaurant(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map,animation:google.maps.Animation.DROP})}static toogleRestaurantFavourite(id,state){return new Promise((resolve,reject)=>{fetch(`${DBHelper.DATABASE_URL}/${id}/?is_favorite=${state}`,{method:"PUT"}).then(response=>{if(200===response.status){const jsonResponse=response.json();openDatabase().then(db=>{db&&jsonResponse.then(restaurant=>{db.transaction(dbId,"readwrite").objectStore(dbId).put(restaurant)})}),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})}static getRestaurantFromIdbById(id){return openDatabase().then(db=>{if(db){return db.transaction(dbId).objectStore(dbId).index("by-id").getAll().then(restaurants=>{const restaurant=restaurants.filter(r=>r.id==id);return!!restaurant.length&&restaurant[0]})}return!1})}static storeRestaurantInIdb(restaurant){return openDatabase().then(db=>{if(!db)return!1;db.transaction(dbId,"readwrite").objectStore(dbId).put(restaurant)})}static postRestaurantReview(id,formData){return new Promise((resolve,reject)=>{fetch(`${DBHelper.DATABASE_URL_REVIEWS}`,{method:"POST",body:formData}).then(response=>{if(201===response.status){const jsonResponse=response.json();jsonResponse.then(review=>{DBHelper.getRestaurantFromIdbById(id).then(restaurant=>{restaurant&&(restaurant.reviews||(restaurant.reviews=[]),restaurant.reviews.push(review),DBHelper.storeRestaurantInIdb(restaurant))})}),resolve(jsonResponse)}else response.text().then(message=>{reject(message)})}).catch(e=>{const error=`Request failed. ${e.message}`;reject(error)})})}}let offlineDb;const offlineDbId="restaurant-offline-reviews";function openOfflineDatabase(){return offlineDb||(navigator.serviceWorker?idb.open(offlineDbId,1,upgradeDb=>{upgradeDb.createObjectStore(offlineDbId,{keyPath:"timestamp"}).createIndex("by-timestamp","timestamp")}):Promise.resolve())}class OfflineDBHelper{static storeReview(review){return openOfflineDatabase().then(db=>{if(!db)return!1;const store=db.transaction(offlineDbId,"readwrite").objectStore(offlineDbId);review.timestamp=(new Date).getTime(),store.put(review)})}static getReviewsIndex(){return openOfflineDatabase().then(db=>!!db&&db.transaction(offlineDbId,"readwrite").objectStore(offlineDbId).index("by-timestamp"))}}let restaurant,osberver,mapLoaded=!1;var map;navigator.serviceWorker&&navigator.serviceWorker.register("sw.js",{scope:"./"}).then(function(reg){console.log("Service worker has been registered for scope: "+reg.scope)}),"IntersectionObserver"in window&&(observer=new IntersectionObserver(function(images){images.forEach(image=>{image.intersectionRatio>0&&(observer.unobserve(image.target),image.target.src=image.target.dataset.src)})},{rootMargin:"10px 0px"})),document.addEventListener("DOMContentLoaded",event=>{const script=document.createElement("script");script.src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClViRpLh2mA3D_Gn5PYcjXsTo2v91ujMs&libraries=places&callback=initMap",document.getElementsByTagName("body")[0].appendChild(script),fetchRestaurantFromURL().then(restaurant=>{fillBreadcrumb(),!self.map&&mapLoaded&&self.initMap(),fetchRestaurantReviewsFromURL().then(reviews=>{fillReviewsHTML()})}).catch(error=>{console.error(error)}),window.addEventListener("resize",()=>{window.innerWidth>=992&&!self.map&&self.initMap()}),document.getElementById("add-review").addEventListener("submit",submitForm),navigator.onLine&&processOfflineReviews(),window.addEventListener("online",e=>{processOfflineReviews()})}),showMapModal=(()=>{document.getElementsByTagName("body")[0].classList.add("map-visible"),self.initMap(!0)}),hideMapModal=(()=>{document.getElementsByTagName("body")[0].classList.remove("map-visible")}),window.initMap=((forceRender=!1)=>{!self.map&&self.restaurant&&(window.innerWidth>=992||forceRender)&&(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:self.restaurant.latlng,scrollwheel:!1}),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map)),mapLoaded=!0}),fetchRestaurantFromURL=(()=>new Promise((resolve,reject)=>{if(self.restaurant)return void resolve(self.restaurant);const id=getParameterByName("id");if(id)DBHelper.fetchRestaurantById(id).then(restaurant=>{self.restaurant=restaurant,fillRestaurantHTML(),resolve(restaurant)}).catch(error=>{reject(error)});else{reject("No restaurant id in URL")}})),fetchRestaurantReviewsFromURL=(()=>new Promise((resolve,reject)=>{if(self.restaurant.reviews)return void resolve(self.restaurant.reviews);const id=getParameterByName("id");if(id)DBHelper.fetchRestaurantReviewsById(id).then(reviews=>{self.restaurant.reviews=reviews,resolve(reviews)}).catch(error=>{reject(error)});else{reject("No restaurant id in URL")}})),fillRestaurantHTML=((restaurant=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=restaurant.name,document.getElementById("restaurant-address").innerHTML=restaurant.address;const image=document.getElementById("restaurant-img");image.className="restaurant-img",image.src="/img/placeholder.png",restaurant.photograph&&(observer?(image.dataset.src=DBHelper.imageUrlForRestaurant(restaurant),observer.observe(image)):image.src=DBHelper.imageUrlForRestaurant(restaurant)),image.alt=restaurant.name,document.getElementById("restaurant-cuisine").innerHTML=restaurant.cuisine_type,document.getElementById("form-restaurant-id").value=restaurant.id,restaurant.operating_hours&&fillRestaurantHoursHTML(),updateFavouriteToggleHTML()}),fillRestaurantHoursHTML=((operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById("restaurant-hours");for(let key in operatingHours){const row=document.createElement("tr"),day=document.createElement("td");day.innerHTML=key,row.appendChild(day);const time=document.createElement("td");time.innerHTML=operatingHours[key],row.appendChild(time),hours.appendChild(row)}}),fillReviewsHTML=((reviews=self.restaurant.reviews)=>{const container=document.getElementById("reviews-container"),title=document.createElement("h2");if(title.innerHTML="Reviews",container.appendChild(title),!reviews){const noReviews=document.createElement("p");return noReviews.innerHTML="No reviews yet!",void container.appendChild(noReviews)}const ul=document.getElementById("reviews-list");reviews.forEach(review=>{ul.appendChild(createReviewHTML(review))}),container.appendChild(ul)}),createReviewHTML=(review=>{const li=document.createElement("li"),name=document.createElement("p");name.innerHTML=review.name,li.appendChild(name);const date=document.createElement("p");date.innerHTML=new Date(review.createdAt).toLocaleString(),li.appendChild(date);const rating=document.createElement("p");rating.innerHTML=`Rating: ${review.rating}/5`,li.appendChild(rating);const comments=document.createElement("p");return comments.innerHTML=review.comments,li.appendChild(comments),li}),fillBreadcrumb=((restaurant=self.restaurant)=>{const breadcrumb=document.getElementById("breadcrumb"),li=document.createElement("li");li.innerHTML=restaurant.name,breadcrumb.appendChild(li)}),toogleFavourite=((restaurant=self.restaurant)=>{restaurant.is_favorite="true"===restaurant.is_favorite?"false":"true",DBHelper.toogleRestaurantFavourite(restaurant.id,restaurant.is_favorite),updateFavouriteToggleHTML()}),updateFavouriteToggleHTML=((restaurant=self.restaurant)=>{const button=document.getElementById("restaurant-favourite"),text=button.getElementsByClassName(".visually-hidden");"true"===restaurant.is_favorite?(button.classList.add("active"),text.innerHTML="Unmark as favourite"):(button.classList.remove("active"),text.innerHTML="Mark as favourite")}),submitForm=(e=>{e.preventDefault();const formData=new FormData(e.srcElement),data={};formData.forEach(function(value,key){data[key]=value}),DBHelper.postRestaurantReview(data.restaurant_id,formData).then(review=>{document.getElementById("reviews-list").appendChild(createReviewHTML(review));const message=document.createElement("p");message.classList.add("message"),message.classList.add("message--success"),message.innerHTML="Review has been successfully submited!",document.getElementById("add-review-container").appendChild(message),document.getElementById("add-review").remove()}).catch(error=>{const message=document.createElement("p");message.classList.add("message"),message.classList.add("message--error"),navigator.onLine?message.innerHTML="Faled to submit review! Please try again later.":(message.innerHTML="You are offline. Review will be autosubmited when you go online.",OfflineDBHelper.storeReview(data)),document.getElementById("add-review-container").appendChild(message),document.getElementById("add-review").remove()})}),processOfflineReviews=(()=>{OfflineDBHelper.getReviewsIndex().then(index=>{index&&index.count().then(count=>{count&&index.openCursor().then(postReview=(cursor=>{if(!cursor)return;const values=cursor.value;DBHelper.postRestaurantReview(values.restaurant_id,JSON.stringify(values)).then(review=>{if(review){document.getElementById("reviews-list").appendChild(createReviewHTML(review))}}).then(()=>{processOfflineReviews()}),cursor.delete()}))})})}),getParameterByName=((name,url)=>{url||(url=window.location.href),name=name.replace(/[\[\]]/g,"\\$&");const results=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`).exec(url);return results?results[2]?decodeURIComponent(results[2].replace(/\+/g," ")):"":null});